1. A* pathfinding continually progresses towards its goal until it reaches its destination. It picks the next node in its path that progresses an object towards its destination and moves to it, repeating this process until it reaches the destination or cannot find a valid way to continue onward. If it reaches this endpoint, A* will no longer continue to search for further paths, regardless of the length of its current path.

2. When dynamically updating obstacles in real time, it becomes possible for the pathfinding object to avoid obstacles it is not meant to ignore; for example, when I tried to add an obstacle in the way of the existing path, the path remained the same. As such, pathfinding must be updated alongside changes to the environment itself to avoid such an error.

3. To adapt this code for larger grids or open world settings, the pathfinding logic would need to be modified to work beyond the scope of a basic grid array. For example, the IsInBounds method could be redefined to use positional values within the world space when calculating boundaries; meanwhile, detection of an obstacle in the way could be handled through ray casts to objects in the scene.

4. To add weighted cells, one approach could be to use integers beyond 0 and 1 within the grid array. For example, rather than representing an obstacle, 1 can represent a tough terrain that requires an extra turn to become a 0 terrain, which would then become fully traversable. An integer such as 2 would require yet another turn to traverse and so on, up until reaching a certain integer that would represent an obstacle as 1 originally did.